@page "/AddMembers/{idProject:int}"

@using ViewModels.User
@using ViewModels.Projects

@inject IMatDialogService MatDialogService
@inject IProjectDataService ProjectDataService
@inject IUserDataService UserDataService
@inject IProjectDataService ProjectDataService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@*@attribute [Authorize(Roles = "Administracion")]*@


<div class="bmining-app">
    <h2>@Resource.Members</h2>



    @if (_users != null || _members != null)
    {
        <div>
            <button class="btn-plus float-right" @onclick="AddMembersProjectCallback">
            </button>

            <table>
                <thead>
                    <tr>
                        <th>@Resource.Email</th>
                        <th>@Resource.ProjectHours</th>
                        <th>@Resource.Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @if (project.MyParentId == 0)
                    {
                        @foreach (var membersProject in _membersItems)
                        {
                            <tr>
                                <td>
                                    <div class="form-group col-md-6">
                                        <select class="form-control" @bind="membersProject.MyId" required>
                                            @foreach (var emails in _users)
                                            {
                                                <option value="@emails.MyId">@emails.MyEmail</option>
                                            }
                                        </select>
                                    </div>
                                </td>
                                <td><input type="number" step="0.1" @bind="@membersProject.MyProjectHours" /> </td>
                                <td>
                                    <button class="btn-delete" @onclick="() => DeleteMembersProject(membersProject)">
                                    </button>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        @foreach (var membersProject in _membersItems)
                        {
                            <tr>
                                <td>
                                    <div class="form-group col-md-6">
                                        <select class="form-control" @bind="membersProject.MyId" required>
                                            @foreach (var emails in _members)
                                            {
                                                <option value="@emails.MyId">@emails.MyEmail</option>
                                            }
                                        </select>
                                    </div>
                                </td>
                                <td><input type="number" step="0.1" @bind="@membersProject.MyProjectHours" /> </td>
                                <td>
                                    <button class="btn-delete" @onclick="() => DeleteMembersProject(membersProject)">
                                    </button>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>

        </div>
        <button class="badge badge-primary badge-pill  bg-bmining-info float-right" @onclick="@InsertMember">@Resource.Add</button>
    }
    else
    {
        <MatProgressBar Indeterminate="true"></MatProgressBar>
    }
</div>

@code {
    [Parameter]
    public int IdProject { get; set; }
    private List<MemberViewModel> _membersItems;
    private List<MemberViewModel> _members;
    private List<UserViewModel> _users;
    private ProjectViewModel project;
    private List<ProjectViewModel> _projectSons;
    private double totalHours;
    private List<MemberViewModel> _membersSons = new List<MemberViewModel>();
    private bool save;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            _projectSons = await ProjectDataService.ReadSonsProject(IdProject);
            project = await ProjectDataService.ReadProject(IdProject);
            if (_projectSons != null)
            {
                foreach (var brother in _projectSons)
                {
                    _membersSons.AddRange(await ProjectDataService.ReadMembers(brother.MyId));
                }
            }
            if (project.MyParentId == 0)
            {
                _users = await UserDataService.ReadUsers();
            }
            else
            {
                _members = await ProjectDataService.ReadMembers(project.MyParentId);
            }
            _membersItems = new List<MemberViewModel>();
            StateHasChanged();
        }
    }

    private void AddMembersProjectCallback()
    {
        _membersItems.Add(new MemberViewModel());
    }

    private void DeleteMembersProject(MemberViewModel membersProject)
    {
        _membersItems.Remove(membersProject);
    }

    private async Task InsertMember()
    {
        if (project.MyParentId != 0)
        {
            save = true;
            foreach (var maxmemberhours in _members)
            {
                foreach (var memberitem in _membersItems)
                {
                    totalHours = 0;
                    foreach (var sons in _membersSons)
                    {
                        if (memberitem.MyId == sons.MyId && maxmemberhours.MyId == sons.MyId)
                        {
                            totalHours = sons.MyProjectHours + totalHours;
                        }

                    }
                    totalHours = totalHours + memberitem.MyProjectHours;
                    if (totalHours > maxmemberhours.MyProjectHours)
                    {
                        save = false;
                    }
                }
            }

            if (save)
            {
                await ProjectDataService.AddMember(_membersItems, IdProject);
                NavigationManager.NavigateTo($"/ViewMembers/{IdProject}");
            }
            else
            {
                await MatDialogService.AlertAsync(Resource.Saved);
            }
        }
        else
        {
            await ProjectDataService.AddMember(_membersItems, IdProject);
            NavigationManager.NavigateTo($"/ViewMembers/{IdProject}");
        }
    }
}
