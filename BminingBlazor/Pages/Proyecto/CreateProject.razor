@page "/CrearProyecto"
@using Models
@using Microsoft.AspNetCore.Http
@using ProjectModel = Models.ProjectModel
@using BminingBlazor.ViewModels.Projects
@using BminingBlazor.ViewModels.User

@inject IProjectDataService ProjectDataService
@inject NavigationManager NavigationManager
@inject IUserDataService UserDataService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpContextAccessor HttpContextAccessor
@inject IClientDataService ClientDataService

@attribute [Authorize(Roles = "Administracion")]


<h3>CrearProyecto</h3>

<EditForm Model="@_newCreateProjectView" OnValidSubmit="@InsertProject">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div>
        <label for="inputNombres">  Codigo de Proyecto:  </label>
        <InputText id="Cod_Proyecto" @bind-Value="_newCreateProjectView.ProjectCode" />
        <label for="inputNombres">  Nombre de Proyecto:  </label>
        <InputText id="Nombre_Proyecto" @bind-Value="_newCreateProjectView.ProjectName" />
    </div>
    <div>
        <label for="inputNombres">Cliente:</label>
        <select class="form-control" @bind="_newCreateProjectView.ClientId" required>

            @foreach (var cliente in clientes)
            {
                <option value="@cliente.Id_Cliente">@cliente.Nombre_Cliente</option>
            }
        </select>
    </div>
    <div>
        <label for="inputNombres">  Fecha de Inicio:  </label>
        <InputDate id="Fecha_Inicio" @bind-Value="_newCreateProjectView.StartDate" />
        <label for="inputNombres">  Fecha de Termino:  </label>
        <InputDate id="Fecha_Fin" @bind-Value="_newCreateProjectView.EndDate" />
    </div>
    <div>

        <label for="inputNombres">  Tipo de Proyecto:  </label>
        <select class="form-control" @bind="_newCreateProjectView.ProjectType" required>
            @if (tipro != null)
            {
                @foreach (var tipoproyecto in tipro)
                {
                    <option value="@tipoproyecto.Cod_TipoProyecto">@tipoproyecto.Tipo_Proyecto</option>
                }
            }
        </select>

    </div>
    <div>
        <label for="inputNombres">Estado del Proyecto:</label>
        <select class="form-control" @bind="_newCreateProjectView.ProjectStatus" required>
           

            @foreach (var project in _statusProjectModels)
            {
                <option value="@project.Id_Status">@project.Status</option>

            }
        </select>
    </div>
    <div>
        <label for="inputNombres">  Email Jefe del Proyecto:  </label>
        <select class="form-control" @bind="_newCreateProjectView.ProjectManager" required>
            @foreach (var boss in users)
            {
                <option value="@boss.id">@boss.Email_Bmining</option>
            }
        </select>
    </div>
    <div>
        <MatButton Type="button" OnClick="AddPaymentStatusCallback">
            Agregar Estado de Pago
        </MatButton>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Nombre</th>
                    <th>Fecha Limite Pago Emitido</th>
                    <th>Fecha Limite Facturación </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var paymentStatus in _paymentStatusItems)
                {
                    <tr>
                        <td><InputText @bind-Value="@paymentStatus.Name" /></td>
                        <td><InputDate @bind-Value="@paymentStatus.IssueExpirationDate"></InputDate></td>
                        <td><InputDate @bind-Value="@paymentStatus.InvoiceExpirationDate"></InputDate></td>
                        <MatButton Type="button" OnClick="()=>DeletePaymentStatus(paymentStatus)">
                            Eliminar
                        </MatButton>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div>
        <MatButton Type="button" OnClick="AddMembersProjectCallback">
            Agregar Integrantes
        </MatButton>

        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Email</th>
                    <th>Horas del Proyecto</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var membersProject in _membersProjectItems)
                {
                    <tr>
                        <td>
                            <div class="form-group col-md-6">

                                <select class="form-control" @bind="membersProject.MyEmail" required>
                                    @if (users is null)
                                    {
                                    }
                                    else
                                    {
                                        @foreach (var emails in users)
                                        {
                                            <option value="@emails.id">@emails.Email_Bmining</option>
                                        }
                                    }
                                </select>
                            </div>
                        </td>
                        <td><input type="number" step="0.1" @bind="@membersProject.MyProjectHours" /> </td>
                        <MatButton Type="button" OnClick="()=>DeleteMembersProject(membersProject)">
                            Eliminar
                        </MatButton>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <MatButton type="submit">@Resource.Next</MatButton>

</EditForm>


@code {


    private ProjectViewModel _newCreateProjectView = new ProjectViewModel();
    private List<TipoProyectoModel> tipro;
    private List<UsuarioModel> users;
    private List<PaymentViewModel> _paymentStatusItems;
    private List<MemberViewModel> _membersProjectItems;
    private List<ClienteModel> clientes;
    private List<StatusProjectModel> _statusProjectModels;




    private void AddPaymentStatusCallback()
    {
        _paymentStatusItems.Add(new PaymentViewModel()
        {
            InvoiceExpirationDate = DateTime.UtcNow,
            IssueExpirationDate = DateTime.UtcNow
        });

    }

    private void AddMembersProjectCallback()
    {
        _membersProjectItems.Add(new MemberViewModel());
    }


    private void DeletePaymentStatus(PaymentViewModel paymentStatus)
    {
        _paymentStatusItems.Remove(paymentStatus);
    }

    private void DeleteMembersProject(MemberViewModel membersProject)
    {
        _membersProjectItems.Remove(membersProject);
    }

    protected override async Task OnInitializedAsync()
    {
        _statusProjectModels = await ProjectDataService.GetAvailableProjectStatus();
        clientes = await ClientDataService.ReadClient();
        tipro = await ProjectDataService.ReadProjectType();
        users = await UserDataService.ReadUsers();
        _paymentStatusItems = new List<PaymentViewModel>();
        _membersProjectItems = new List<MemberViewModel>();
        string user = HttpContextAccessor.HttpContext.User.Identity.Name;

    }


    protected override void OnInitialized()
    {
        base.OnInitialized();
        _newCreateProjectView.StartDate = DateTime.Today;
        _newCreateProjectView.EndDate = DateTime.Today;



    }

    private async Task InsertProject()
    {
        string user = HttpContextAccessor.HttpContext.User.Identity.Name;
        var id_Creador = await UserDataService.GetUserId(user);
        var project = new ProjectViewModel()
        {
            ProjectCode = _newCreateProjectView.ProjectCode,
            ProjectName = _newCreateProjectView.ProjectName,
            ProjectType = _newCreateProjectView.ProjectType,
            StartDate = _newCreateProjectView.StartDate,
            EndDate = _newCreateProjectView.EndDate,
            Creator =  new UserViewModel(){MyId = id_Creador},
            ProjectManager =_newCreateProjectView.ProjectManager,
            ClientId = _newCreateProjectView.ClientId,
            ProjectStatus = _newCreateProjectView.ProjectStatus


        };
        var id_proyecto = await ProjectDataService.CreateProject(project);
        //TODO hacerlo funcional con el nuevo viewmodel ademas de agregar variables faltantes
        //foreach (var members in _membersProjectItems)
        //{
        //    {
        //        project.Id_Proyecto = id_proyecto;
        //        project.Id_Usuario = members.Id_Usuario;
        //        project.HoursProject = members.HoursProject;
        //    };
        //    await ProjectDataService.AddMember(project);
        //}
        //foreach (var estados in _paymentStatusItems)
        //{
        //    var status = new EstadoPagoModel()
        //    {
        //        Id_Proyecto = id_proyecto,
        //        Estado_Pago = estados.Name,
        //        InvoiceExpirationDate = estados.InvoiceExpirationDate,
        //        IssueExpirationDate = estados.IssueExpirationDate,
        //        Cod_TipoEstadoPago = 1
        //    };
        //await ProjectDataService.AddPaymentStatus(status);
    }



   // NavigationManager.NavigateTo("/Proyectos");

    }





}
