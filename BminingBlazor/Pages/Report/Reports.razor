@page "/Reports"
@page "/Reports/{projectId:int}"
@using BminingBlazor.ViewModels.Projects
@using BminingBlazor.ViewModels.User

@inject IDummyProjectDataService DummyProjectDataService
@inject IUserDataService UserDataService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IMatDialogService MatDialogService
@inject IProjectDataService ProjectDataService
@inject NavigationManager NavigationManager
<h3>Component</h3>
<div class="bmining-app">
    @if (a == 0)
    {


        <select class="form-control" id="contract" @bind="_project.MyId" required>
            @foreach (var project in ViewModel)
            {
                <option value="@project.MyProjectId">
                    @project.MyProjectCode - @project.MyProjectName
                </option>
            }
        </select>

        <button class="bmining-button" @onclick="() => SelectProject(_project.MyId)"></button>

    }
    else
    {
        <div class="form-group">
            <label for="contract">@Resource.Projects</label>
            <select class="form-control" id="contract" @bind="_member.MyId" required>
                
                @foreach (var member in users)
                {
                    <option value="@member.MyId">
                        @member.MyName @member.MyPaternalSurname
                    </option>
                }
            </select>
        </div>}
</div>

@code {
    [Parameter]
    public int projectId { get; set; }
    public int a { get; set; }




    public List<MemberViewModel> users { get; set; }
    public List<ProjectResumeViewModel> ViewModel { get; set; }
    private readonly ProjectViewModel _project = new ProjectViewModel();
    private readonly MemberViewModel _member = new MemberViewModel();
    protected override async Task OnInitializedAsync()
    { if (projectId == 0)
        {
            var email = AuthenticationStateProvider.GetEmail();
            var userId = await UserDataService.GetUserId(await email);
            var projectsBelongsUserId = await DummyProjectDataService.GetProjectWhereBelongsUserId(userId);
            ViewModel = new List<ProjectResumeViewModel>();
            ViewModel.AddRange(projectsBelongsUserId);
            a = 0;
        }
        else
        {
            var members = await ProjectDataService.ReadMembers(projectId);
            a = 1;
            users = new List<MemberViewModel>();
            users.AddRange(members);
            
        }
    }
    private async void SelectProject(int IdProject)
    {
        NavigationManager.NavigateTo($"/Reports/{IdProject}",true);
    }
}

