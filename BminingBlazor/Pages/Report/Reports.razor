@page "/Reports"
@page "/Reports/{codeProject}/{startDate:datetime}/{endDate:datetime}"
@using BminingBlazor.ViewModels.Projects
@using BminingBlazor.ViewModels.User

@inject IDummyProjectDataService DummyProjectDataService
@inject IUserDataService UserDataService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IMatDialogService MatDialogService
@inject IProjectDataService ProjectDataService
@inject ITimeTrackingService TimeTrackingService
@inject IReportService ReportService
@inject NavigationManager NavigationManager

<div class="bmining-app">
    <div class="d-flex flex-row w-100 justify-content-between">
        <div class="d-inline-block">
            <h2>@Resource.Report</h2>
        </div>
    </div>
    <div class="main-break">
        <div class="main-circle"></div>
    </div>
    
    @if (ViewModel==null && users==null )
    {
        <MatProgressBar Indeterminate="true"></MatProgressBar>
    }
    else
    {

        @if (codeProject==null)
        {<div class="form-group">
                <MatAutocompleteList Items="@ViewModel" TItem="ProjectResumeViewModel" FullWidth="true" CustomStringSelector="@(i => i?.MyProjectCode + " " + i?.MyProjectName)" Label="@Resource.Projects" @bind-Value="@value" ShowClearButton="true">
                    <ItemTemplate>
                        <div style="display: flex; flex-direction: row; width: 100%;">
                            <div style="flex:1;">@context.MyProjectCode</div>
                            <div style="flex:1;">@context.MyProjectName</div>
                        </div>
                    </ItemTemplate>
                </MatAutocompleteList>



            </div>
            <div class="form-group col">
                <label for="inputStartDate">@Resource.StartDate</label>
                <input class="form-control" type="date" id="inputStartDate" @bind="_project.MyStartDate" />
            </div>
            <div class="form-group col">
                <label for="inputEndDate">@Resource.EndDate</label>
                <input class="form-control" type="date" id="inputEndDate" @bind="_project.MyEndDate" />
            </div>
            <button class="bmining-button float-md-right" @onclick="() => SelectAllMembers(value.MyProjectCode, _project.MyStartDate, _project.MyEndDate)">@Resource.SelectAllMembers</button>
            <button class="bmining-button float-right" @onclick="() => SelectProject(value.MyProjectCode, _project.MyStartDate, _project.MyEndDate)">@Resource.SelectMember</button>
        }
        else
        {
            <div class="form-group">
                <label for="contract">@Resource.Members</label>
                <select class="form-control" id="contract" @bind="_member.MyId" required>

                    @foreach (var member in users)
                    {
                        <option value="@member.MyId">
                            @member.MyName @member.MyPaternalSurname
                        </option>
                    }
                </select>
            </div>
            <button class="bmining-button float-right" @onclick="() => ReadHours(_member.MyId, _project.MyStartDate, _project.MyEndDate, codeProject)">@Resource.ViewReport</button>
        }
    }
</div>

@code {
    [Parameter]
    public string codeProject { get; set; }
    [Parameter]
    public DateTime startDate { get; set; }
    [Parameter]
    public DateTime endDate { get; set; }


    public int phase { get; set; }
    public List<MemberViewModel> users { get; set; }
    public List<ProjectResumeViewModel> ViewModel { get; set; }
    private ProjectViewModel _project = new ProjectViewModel();
    public MemberViewModel _member { get; set; }
    ProjectResumeViewModel value = null;


    protected override async Task OnAfterRenderAsync(bool firstrender)
    {
        await base.OnAfterRenderAsync(firstrender);

        if (firstrender)
        {
            if (codeProject == null)
            {
                _project.MyStartDate = DateTime.UtcNow;
                _project.MyEndDate = DateTime.UtcNow;
                var email = AuthenticationStateProvider.GetEmail();
                var userId = await UserDataService.GetUserId(await email);
                var projectsBelongsUserId = await ReportService.GetProjectFatherWhereBelongsUserId(userId);
                var projects = await ReportService.GetProjectFather();
                ViewModel = new List<ProjectResumeViewModel>();
                if (userId == 5 || userId == 23 || userId == 14)
                {
                    ViewModel.AddRange(projects);
                }
                else
                {
                    ViewModel.AddRange(projectsBelongsUserId);
                }
                phase = 0;
                StateHasChanged();
            }
            else
            {
                var members = await ReportService.ReadMembersFromCode(codeProject);
                _project.MyStartDate = startDate;
                _project.MyEndDate = endDate;
                phase = 1;
                users= new List<MemberViewModel>();
                users.AddRange(members);
                StateHasChanged();
            }
        }
    }
    private void SelectProject(string CodeProject, DateTime StartDate, DateTime EndDate)
    {
        NavigationManager.NavigateTo($"/Reports/{CodeProject}/{StartDate.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture)}/{EndDate.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture)}", true);
    }
    private void SelectAllMembers(string CodeProject, DateTime StartDate, DateTime EndDate)
    {
        NavigationManager.NavigateTo($"/ViewProjectReport/{StartDate.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture)}/{EndDate.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture)}/{CodeProject}", true);
    }
    private void ReadHours(int IdUser, DateTime StartDate, DateTime EndDate, string CodeProject)
    {
        NavigationManager.NavigateTo($"/ViewReport/{IdUser}/{StartDate.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture)}/{EndDate.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture)}/{CodeProject}");
    }

}

