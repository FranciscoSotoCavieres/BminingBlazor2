@page "/ViewProjectReport/{startDate:datetime}/{endDate:datetime}/{codeProject}"
@page "/ViewProjectReport/{startDate:datetime}/{endDate:datetime}/{projectID:int}/{levelSelect:int}"
@page "/ViewProjectReport/{startDate:datetime}/{endDate:datetime}/{codeProject}/{levelSelect:int}"
@using BminingBlazor.ViewModels.Report;
@using System.IO;
@using Microsoft.JSInterop;
@using OfficeOpenXml;
@using OfficeOpenXml.Style;
@using Data;
@using ViewModels.Projects;

@inject IProjectDataService ProjectDataService
@inject IReportService ReportService
@inject IJSRuntime iJSRuntime
@inject NavigationManager NavigationManager


<div class="bmining-app">
    <div class="d-flex flex-row w-100 justify-content-between">
        <div class="d-inline-block">
            <h2>@Resource.Report</h2>
        </div>
    </div>


    @if (_report == null)
    {
        <MatProgressBar Indeterminate="true"></MatProgressBar>
    }
    else
    {
        @if (root.Son == null || levelselect == 3 || levelselect == 4)
        {
            <div class="table-responsive{-sm|-md|-lg|-xl}">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>@Resource.Name</th>
                            <th>@Resource.Surname</th>
                            <th>@Resource.ProjectCode</th>
                            <th>@Resource.ProjectName</th>
                            <th>@Resource.Hours</th>
                            <th>@Resource.Date</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var reportMember in _report)
                        {
                            <tr>
                                <td>@reportMember.MyName</td>
                                <td>@reportMember.MyPaternalSurname</td>
                                <td>@reportMember.MyCodProject</td>
                                <td>@reportMember.MyNameProject</td>
                                <td>@reportMember.MyTrackedHours</td>
                                <td>@reportMember.MyDateTracked</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div class="alternate3-break"></div>

            <button class="btn-download float-right" @onclick="ExportExcel"></button>
        }

        @if (root.Son != null && levelselect != 3)
        {
            options = root.Son;
            <label for="contract">@Resource.Project</label>
            <select class="form-control" id="projectdId" @bind="@idProject" required>


                <option value="@options.Data.MyId">
                    @options.Data.MyProjectName
                </option>
                @while (options.Brother != null)
                {
                    <option value="@options.Brother.Data.MyId">
                        @options.Brother.Data.MyProjectName
                    </option>
                    options = options.Brother;
                }
            </select>
            <div class="alternate3-break"></div>
            <button class="badge badge-primary badge-pill  bg-bmining-info float-right" @onclick="() => SelectSon(idProject)">@Resource.SelectSubProject</button>
            <button class="badge badge-primary badge-pill  bg-bmining-info float-right" @onclick="()=>proyectoactual(options.Data.MyParentId)">@Resource.SelectCurrentProject</button>
        }

    }
</div>

@code {

    [Parameter]
    public int userId { get; set; }
    [Parameter]
    public DateTime startDate { get; set; }
    [Parameter]
    public DateTime endDate { get; set; }
    [Parameter]
    public string codeProject { get; set; }
    [Parameter]
    public int levelselect { get; set; }
    [Parameter]
    public int projectId { get; set; }

    public CProject project = new CProject();
    public List<ReportViewModel> _report = new List<ReportViewModel>();
    public ProjectViewModel father = new ProjectViewModel();
    public List<ProjectViewModel> _sons = new List<ProjectViewModel>();
    public List<ProjectViewModel> _GrandChilds = new List<ProjectViewModel>();
    public CNode root = new CNode();
    public CNode n = new CNode();
    public CNode options = new CNode();
    public List<CNode> _listSons = new List<CNode>();
    public int idProject { get; set; }
    public int levelSelect { get; set; }
    public List<ProjectViewModel> _projects = new List<ProjectViewModel>();





    protected override async Task OnInitializedAsync()
    {
        if (levelselect == 1)
        {
            _projects = await ProjectDataService.ReadSonsProject(projectId);
            _report = await ReportService.GetProjectReportSons(startDate, endDate, projectId);
            foreach (var project in _projects)
            {
                if (project.MyLevel == 1)
                {
                    father = project;
                }
                if (project.MyLevel == 2)
                {
                    _sons.Add(project);
                }
            }
            root = project.Insertar(father, null);
            foreach (var son in _sons)
            {
                n = project.Insertar(son, root);
            }

        }
        else if (levelselect == 4)
        {
            _report = await ReportService.GetProjectReport(startDate, endDate, projectId);
            _report.AddRange(await ReportService.GetProjectReportSons(startDate, endDate, projectId));
        }
        else if (levelselect == 2)
        {
            _report = await ReportService.GetProjectReport(startDate, endDate, projectId);
        }
        else
        {
            _report = await ReportService.GetProjectReportTree(startDate, endDate, codeProject);
            _projects = await ProjectDataService.ReadTreeProject(codeProject);

            foreach (var project in _projects)
            {
                if (project.MyLevel == 0)
                {
                    father = project;
                }
                if (project.MyLevel == 1)
                {
                    _sons.Add(project);
                }
                if (project.MyLevel == 2)
                {
                    _GrandChilds.Add(project);
                }
            }
            root = project.Insertar(father, null);
            foreach (var son in _sons)
            {
                n = project.Insertar(son, root);
                foreach (var grandchild in _GrandChilds)
                {
                    if (grandchild.MyParentId == son.MyId)
                    {
                        project.Insertar(grandchild, n);
                    }
                }
            }
        }

        StateHasChanged();
    }
    public void SelectSon(int projectId)
    {
        if (levelselect == 1)
        {
            NavigationManager.NavigateTo($"/ViewProjectReport/{startDate.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture)}/{endDate.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture)}/{projectId}/{2}", true);
        }
        else
        {
            NavigationManager.NavigateTo($"/ViewProjectReport/{startDate.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture)}/{endDate.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture)}/{projectId}/{1}", true);
        }
    }
    public void proyectoactual(int projectId)
    {
        if (levelselect == 1)
        {
            NavigationManager.NavigateTo($"/ViewProjectReport/{startDate.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture)}/{endDate.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture)}/{projectId}/{4}", true);
        }
        else
        {
            NavigationManager.NavigateTo($"/ViewProjectReport/{startDate.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture)}/{endDate.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture)}/{codeProject}/{3}", true);
        }
    }
    public async Task ExportExcel()
    {
        GenerateReport generateReport = new GenerateReport()
        { _reports = _report };
        generateReport.GenerateExcel(iJSRuntime);
    }
}

