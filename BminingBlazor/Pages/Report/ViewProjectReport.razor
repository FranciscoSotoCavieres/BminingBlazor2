@page "/ViewProjectReport/{startDate:datetime}/{endDate:datetime}/{codeProject}"
@using BminingBlazor.ViewModels.Report;
@using System.IO;
@using Microsoft.JSInterop;
@using OfficeOpenXml;
@using OfficeOpenXml.Style;
@using Data;
@using ViewModels.Projects;


@inject IReportService ReportService
@inject IJSRuntime iJSRuntime


<div class="bmining-app">
    <div class="d-flex flex-row w-100 justify-content-between">
        <div class="d-inline-block">
            <h2>@Resource.Report</h2>
        </div>
    </div>


    @if (_report == null)
    {
        <MatProgressBar Indeterminate="true"></MatProgressBar>
    }
    else
    {@if (root.Son == null)
        {
            <div class="table-responsive{-sm|-md|-lg|-xl}">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>@Resource.Name</th>
                            <th>@Resource.Surname</th>
                            <th>@Resource.ProjectCode</th>
                            <th>@Resource.ProjectName</th>
                            <th>@Resource.Hours</th>
                            <th>@Resource.Date</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var reportMember in _report)
                        {
                            <tr>
                                <td>@reportMember.MyName</td>
                                <td>@reportMember.MyPaternalSurname</td>
                                <td>@reportMember.MyCodProject</td>
                                <td>@reportMember.MyNameProject</td>
                                <td>@reportMember.MyTrackedHours</td>
                                <td>@reportMember.MyDateTracked</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>


            <button class="btn-download float-right" @onclick="ExportExcel"></button>
        }
}
    @if (root.Son != null)
    {

<select class="form-control" id="contract" required>

    <option value="">
        @root.Son.Data.MyNameProject       
    </option>
    <option value="">        
        @root.Son.Brother.Data.MyNameProject
    </option>

</select>
        
    }
</div>

@code {

    [Parameter]
    public int userId { get; set; }
    [Parameter]
    public DateTime startDate { get; set; }
    [Parameter]
    public DateTime endDate { get; set; }
    [Parameter]
    public string codeProject { get; set; }

    public CProject project = new CProject();
    public List<ReportViewModel> _report = new List<ReportViewModel>();
    public ReportViewModel father = new ReportViewModel();
    public List<ReportViewModel> _sons = new List<ReportViewModel>();
    public List<ReportViewModel> _GrandChilds = new List<ReportViewModel>();
    public CNode root = new CNode();
    public CNode n = new CNode();
    public CNode select = new CNode();
    public List<CNode> _listSons = new List<CNode>();



    protected override async Task OnInitializedAsync()
    {
        _report = await ReportService.GetProjectReport(startDate, endDate,codeProject);

        foreach (var report in _report)
        {
            if (report.MyLevel == 0)
            {
                father = report;
            }
            if (report.MyLevel == 1)
            {
                _sons.Add(report);
            }
            if (report.MyLevel == 2)
            {
                _GrandChilds.Add(report);
            }
        }
        root = project.Insertar(father, null);
        foreach (var son in _sons)
        {
            n = project.Insertar(son, root);
            foreach (var grandchild in _GrandChilds)
            {
                if (grandchild.MyParentId == son.MyProjectId)
                {
                    project.Insertar(grandchild, n);
                }
            }
        }

        StateHasChanged();
    }
    public async Task ExportExcel()
    {
        GenerateReport generateReport = new GenerateReport()
        { _reports = _report };
        generateReport.GenerateExcel(iJSRuntime);
    }
}

