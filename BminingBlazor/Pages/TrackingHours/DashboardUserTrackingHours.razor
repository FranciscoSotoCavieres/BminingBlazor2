@page "/dashboard_tracking_hours"
@page "/dashboard_tracking_hours/{day:int}/{month:int}/{year:int}"
@using BminingBlazor.ViewModels.TrackingHours
@using Microsoft.AspNetCore.Http
@using Models.TimeTracking
@using System.Globalization
@using Humanizer

@inject ITimeTrackingService TimeTrackingService
@inject IMatToaster MatToaster
@inject IUserDataService UserDataService
@inject NavigationManager NavigationManager
@inject IMatDialogService MatDialogService
@inject AuthenticationStateProvider AuthenticationStateProvider

<style>
    .week-header-container {
        display: inline-grid;
        grid-template-columns: auto auto auto 1fr;
        grid-column-gap: 4px;
        align-items: center
    }

    .week-header-item {
        vertical-align: middle;
        display: inline;
        text-align: center;
    }

    .week-header-bmining-button {
        font-size: 30px;
        font-weight: bold;
        padding: 0px 18px;
    }


    .item-dashboard-container {
        display: inline-grid;
        grid-template-columns: auto 1fr auto;
        grid-column-gap: 0px;
        align-items: center
    }

    .item-dashboard-item {
        vertical-align: middle;
        display: inline;
        text-align: center;
        padding: 5px
    }
    .item-dashboard-item2 {
        position:absolute;
        vertical-align: middle;
        display: inline;       
        padding: 5px;
        right: 50px
    }

    .item-dashboard-border {
        margin: 5px;
        border-style: solid;
        border-radius: 4px;
        border-width: 2.5px;
    }

    .header-break {
        margin: 0px 0px 0px 16px
    }
</style>

<div class="bmining-app">

    @if (IsLoading)
    {
        <MatProgressBar Indeterminate="true"></MatProgressBar>
    }
    else
    {
        <h2 class="header-break">@Resource.DashboardHours</h2>
        <div class="main-break">
            <div class="main-circle"></div>
        </div>

        <div class="week-header-container">
            <div class="week-header-item">
                <button class="bmining-btn-icon week-header-bmining-button" @onclick="@PreviousWeek">
                    <i class="fa fa-caret-left"></i>
                </button>
            </div>
            <div class="week-header-item">
                <button class="bmining-btn-icon week-header-bmining-button" @onclick="@NextWeek">
                    <i class="fa fa-caret-right"></i>
                </button>
            </div>
            <div class="week-header-item">
                <MatDatePicker @bind-Value="@MySelectedDate" />
            </div>
            <div class="week-header-item">
                <h4 class="m-2">@Resource.Week @MyStartOfWeek.ToLongDateString()</h4>
            </div>
        </div>

        <div class="alternate1-break">

        </div>

        <div class="w-100">
            @if (DashboardUserTracking != null)
            {
                @foreach (var weekDayUserTrackingHours in DashboardUserTracking.WeekDayUserTrackingHours)
                {
                    totalHours = 0;
                    <div class="col">
                        <div class="d-flex flex-row w-100 justify-content-between">
                            <div class="d-inline-block">
                                <h5 class="font-weight-bold">@weekDayUserTrackingHours.ItemTime.ToString("dddd").Pascalize()</h5>
                            </div>
                            @foreach (var day in weekDayUserTrackingHours.OurWeekDayUserTrackingHourItems)
                            {
                                totalHours = totalHours + day.MyTrackedHours;
                            }
                            
                                <div class="item-dashboard-item2">
                                    <span class="badge badge-primary badge-pill m-1 bg-bmining-@TotalHoursStatus(totalHours)">
                                        <h10>@Resource.Hours : </h10>@totalHours
                                    </span>
                                </div>
                            
                                <div class="d-inline-block">
                                    <button @onclick="() => AddItem(weekDayUserTrackingHours)" class="bmining-btn-icon">
                                        <i class="fa fa-plus"></i>
                                    </button>
                                </div>
                            </div>
                            <div class="list-group">
                                @foreach (var dayUserTrackingHourItem in weekDayUserTrackingHours.OurWeekDayUserTrackingHourItems)
                                {
                                    <div class="item-dashboard-container item-dashboard-border @dayUserTrackingHourItem.MyTrackingStatusClass">

                                        <h5 class="item-dashboard-item">
                                            @dayUserTrackingHourItem.MyProjectName
                                        </h5>
                                        <div class="item-dashboard-item w-100">

                                        </div>
                                        <div class="item-dashboard-item">
                                            <span class="badge badge-primary badge-pill m-1 bg-bmining-info">
                                                @dayUserTrackingHourItem.MyTrackedHours
                                            </span>
                                            @if (dayUserTrackingHourItem.MyTimeTimeTrackingStatus == TimeTrackingStatusEnum.WaitingForApproval)
                                            {
                                                <button @onclick="() => EditItem(dayUserTrackingHourItem)" class="bmining-btn-icon">
                                                    <i class="fa fa-edit"></i>
                                                </button>
                                                <button @onclick="() => RemoveItem(weekDayUserTrackingHours, dayUserTrackingHourItem)" class="bmining-btn-icon">
                                                    <i class="fa fa-trash"></i>
                                                </button>
                                            }
                                            else if (dayUserTrackingHourItem.MyTimeTimeTrackingStatus == TimeTrackingStatusEnum.Rejected)
                                            {
                                                <button @onclick="() => EditItem(dayUserTrackingHourItem)" class="bmining-btn-icon">
                                                    <i class="fa fa-trash"></i>
                                                </button>
                                            }
                                        </div>
                                    </div>
                                }
                            </div>
                            <div class="alternate2-break"></div>
                        </div>
                }
            }
        </div>
    }
</div>

@code {
    [Parameter]
    public int? Day { get; set; }
    [Parameter]
    public int? Month { get; set; }
    [Parameter]
    public int? Year { get; set; }


    public bool IsLoading { get; set; }
    public string Email { get; set; }
    public double totalHours { get; set; }

    public DashboardUserTrackingViewModel DashboardUserTracking { get; set; }

    private bool _firstRender = true;
    private int _currentDateSet = 0;
    private DateTime _mySelectedDate;
    public DateTime MySelectedDate
    {
        get { return _mySelectedDate; }
        set
        {
            _mySelectedDate = value;
            var dayOfWeek = value.DayOfWeek;
            int numberOfDay;
            switch (dayOfWeek)
            {
                case DayOfWeek.Saturday:
                    numberOfDay = 0;
                    break;
                case DayOfWeek.Sunday:
                    numberOfDay = 1;
                    break;
                case DayOfWeek.Monday:
                    numberOfDay = 2;
                    break;
                case DayOfWeek.Tuesday:
                    numberOfDay = 3;
                    break;
                case DayOfWeek.Wednesday:
                    numberOfDay = 4;
                    break;
                case DayOfWeek.Thursday:
                    numberOfDay = 5;
                    break;
                case DayOfWeek.Friday:
                    numberOfDay = 6;
                    break;
                default:
                    throw new ArgumentOutOfRangeException();
            }

            MyStartOfWeek = MySelectedDate.AddDays(-numberOfDay);

            this.StateHasChanged();
            SetDate(MyStartOfWeek).Wait();
            IsLoading = false;
        }
    }

    public DateTime MyStartOfWeek { get; set; }


    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            var Email = AuthenticationStateProvider.GetEmail();
            var userId = await UserDataService.GetUserId(await Email);
            DashboardUserTracking = new DashboardUserTrackingViewModel(TimeTrackingService);
            DashboardUserTracking.MyUserId = userId;
            if (!Day.HasValue || !Month.HasValue || !Year.HasValue)
            {
                var date = DateTime.UtcNow.ToLocalTime();
                MySelectedDate = new DateTime(date.Year, date.Month, date.Day);
            }
            else MySelectedDate = new DateTime(Year.Value, Month.Value, Day.Value);
            this.StateHasChanged();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task SetDate(DateTime fromTime)
    {
        await DashboardUserTracking.SetStartDate(fromTime);
    }

    private void AddItem(WeekDayUserTrackingHoursViewModel weekDayUserTrackingHours)
    {
        var dateTime = weekDayUserTrackingHours.ItemTime;
        NavigationManager.NavigateTo($"/addusertrackinghour/{dateTime.Day}/{dateTime.Month}/{dateTime.Year}");
    }

    private async Task RemoveItem(WeekDayUserTrackingHoursViewModel dayUserTrackingHours, WeekDayUserTrackingHoursItemViewModel weekDayUserTrackingHours)
    {
        var status = await MatDialogService.ConfirmAsync(Resource.AreYouSureToDelete);
        if (!status) return;
        await TimeTrackingService.RemoveTimeTrackingHour(weekDayUserTrackingHours.MyId);
        dayUserTrackingHours.OurWeekDayUserTrackingHourItems.Remove(weekDayUserTrackingHours);
        StateHasChanged();
    }

    private async Task EditItem(WeekDayUserTrackingHoursItemViewModel dayUserTrackingHourItem)
    {
        var answer = await MatDialogService.PromptAsync(Resource.NewHours, dayUserTrackingHourItem.MyTrackedHours.ToString(CultureInfo.InvariantCulture));
        if (answer == null)
            return;
        if (!double.TryParse(answer, out var newHours))
        {
            await MatDialogService.AlertAsync(Resource.InvalidNumber);
            return;
        }
        await TimeTrackingService.EditStatusTimeTracking(dayUserTrackingHourItem.MyId, TimeTrackingStatusEnum.WaitingForApproval, newHours);
        dayUserTrackingHourItem.MyTimeTimeTrackingStatus = TimeTrackingStatusEnum.WaitingForApproval;
        dayUserTrackingHourItem.MyTrackedHours = newHours;
        StateHasChanged();
    }

    private void NextWeek()
    {
        MySelectedDate = MySelectedDate.AddDays(7);
    }

    private void PreviousWeek()
    {
        MySelectedDate = MySelectedDate.AddDays(-7);
    }
    private string TotalHoursStatus(double totalHours)
    {
        if (totalHours > 9)
        {
            return "error";
        }
        else 
        {
            return "info";
        }            
    }
}
