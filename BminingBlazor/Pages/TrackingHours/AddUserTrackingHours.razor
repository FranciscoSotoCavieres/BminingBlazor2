@page "/addusertrackinghour/{day:int}/{month:int}/{year:int}"
@page "/addusertrackinghour/{day:int}/{month:int}/{year:int}/{projectId:int}/{nameProject1}/{level:int}/{select:int}"
@page "/addusertrackinghour/{day:int}/{month:int}/{year:int}/{projectId:int}/{nameProject1}/{nameProject2}/{level:int}/{select:int}"
@page "/addusertrackinghour/{day:int}/{month:int}/{year:int}/{projectId:int}/{nameProject1}/{nameProject2}/{nameProject3}/{level:int}/{select:int}"
@page "/addusertrackinghour/{day:int}/{month:int}/{year:int}/{projectId:int}/{nameProject1}/{nameProject2}/{nameProject3}/{nameProject4}/{level:int}/{select:int}"

@using BminingBlazor.ViewModels.TrackingHours
@using Microsoft.AspNetCore.Http
@using ViewModels.Projects

@inject IReportService ReportService
@inject IUserDataService UserDataService
@inject IProjectDataService ProjectDataService
@inject ITimeTrackingService TimeTrackingService
@inject NavigationManager NavigationManager
@inject IDummyProjectDataService DummyProjectDataService
@inject IMatDialogService MatDialogService
@inject AuthenticationStateProvider AuthenticationStateProvider

<style>
    .load-hours-container {
        display: inline-grid;
        grid-template-rows: auto 1fr auto 1fr;
    }

    .load-hours-item {
        display: inline;
    }


    .load-hours-label {
        font-size: 22px
    }
</style>

<div class="bmining-app">

    <h2 class="header-break">@Resource.LoadHours @ViewModel.MyTrackingHourDate.ToShortDateString()</h2>
    @if (Level == 1)
    {
        <h3 class="header-break">@NameProject1</h3>
    }
    @if (Level == 2)
    {
        <h3 class="header-break">@NameProject1/@NameProject2</h3>
    }
    @if (Level == 3)
    {
        <h3 class="header-break">@NameProject1/@NameProject2/@NameProject3</h3>
    }
    @if (Level == 4)
    {
        <h3 class="header-break">@NameProject1/@NameProject2/@NameProject3/@NameProject4</h3>
    }

    @if (!IsLoading)
    {

        @if (Select == 1 || Level == 4 || projectSons.Count == 0)
        {<EditForm Model="@ViewModel" OnValidSubmit="SubmitCallback">
                <div class="form-group">
                    <label for="inputHours" class="load-hours-label">@Resource.InvestedHours</label>
                    <input type="number" @bind="@ViewModel.MyHours" step="0.01" class="form-control" id="inputHours" placeholder="@Resource.InvestedHours">
                </div>
                <div class="w-100">
                    <button type="submit" class="badge badge-primary badge-pill  bg-bmining-info float-right float-right">@Resource.Load</button>
                </div>
            </EditForm>
        }
        else
        {
            <div class="form-group">
                <label for="inputProject" class="load-hours-label">@Resource.Project</label>
                <select @bind="@ViewModel.MySelectedProjectId" class="form-control" id="inputProject">

                    @foreach (var projectDetailsViewModel in ViewModel?.OurAvailableProjects)
                    {
                        <option value="@projectDetailsViewModel.MyProjectId">
                            @projectDetailsViewModel.MyProjectCode - @projectDetailsViewModel.MyProjectName
                        </option>
                    }
                </select>
            </div>
            <button class="badge badge-primary badge-pill  bg-bmining-info float-right" @onclick="() => SelectSon(ViewModel.MySelectedProjectId)">@Resource.SelectSubProject</button>
            <button class="badge badge-primary badge-pill  bg-bmining-info float-right" @onclick="()=>SelectProject(ViewModel.MySelectedProjectId)">@Resource.SelectCurrentProject</button>
        }


    }
    else
    {
        <MatProgressBar Indeterminate="true"></MatProgressBar>
    }
</div>

@code {
    [Parameter]
    public int Day { get; set; }
    [Parameter]
    public int Month { get; set; }
    [Parameter]
    public int Year { get; set; }
    [Parameter]
    public int Level { get; set; }
    [Parameter]
    public int ProjectId { get; set; }
    [Parameter]
    public string NameProject1 { get; set; }
    [Parameter]
    public string NameProject2 { get; set; }
    [Parameter]
    public string NameProject3 { get; set; }
    [Parameter]
    public string NameProject4 { get; set; }
    [Parameter]
    public int Select { get; set; }


    public bool IsLoading { get; set; }
    public List<ProjectViewModel> projectSons = new List<ProjectViewModel>();
    public AddUserTimeTrackingViewModel ViewModel { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var email = AuthenticationStateProvider.GetEmail();
        var userId = await UserDataService.GetUserId(await email);
        if (Level == 0)
        {
            projectSons = await ProjectDataService.ReadSonsProject(ProjectId);
            var projectsBelongsUserId = await ReportService.GetProjectFatherWhereBelongsUserId(userId);
            ViewModel = new AddUserTimeTrackingViewModel(userId)
            {
                MyTrackingHourDate = new DateTime(Year, Month, Day),
            };
            ViewModel.OurAvailableProjects.AddRange(projectsBelongsUserId);
            ViewModel.MySelectedProjectId = projectsBelongsUserId.FirstOrDefault()?.MyProjectId;
        }
        else
        {
            var projectUser = await DummyProjectDataService.GetProjectWhereBelongsUserId(userId);
            projectSons = await ProjectDataService.ReadSonsProject(ProjectId);
            var projectsBelongsUserId = new List<ProjectResumeViewModel>();
            foreach (var pro in projectSons)
            {
                var project = new ProjectResumeViewModel()
                {
                    MyProjectCode = pro.MyProjectCode,
                    MyProjectId = pro.MyId,
                    MyProjectName = pro.MyProjectName
                };
                if (projectUser.Exists(x => x.MyProjectId == project.MyProjectId))
                {
                    projectsBelongsUserId.Add(project);
                }
            }

            ViewModel = new AddUserTimeTrackingViewModel(userId)
            {
                MyTrackingHourDate = new DateTime(Year, Month, Day),
            };
            ViewModel.OurAvailableProjects.AddRange(projectsBelongsUserId);
            ViewModel.MySelectedProjectId = projectsBelongsUserId.FirstOrDefault()?.MyProjectId;
        }
    }

    private async Task SubmitCallback()
    {
        if (ProjectId < 0)
        {
            await MatDialogService.AlertAsync(@Resource.MissingProject);
            return;
        }

        if (ViewModel.MyHours <= 0)
        {
            await MatDialogService.AlertAsync(@Resource.InvalidNumber);
            return;
        }

        IsLoading = true;
        var userId = ViewModel.UserId;
        var timeTracking = ViewModel.MyTrackingHourDate;
        var hours = ViewModel.MyHours;
        await TimeTrackingService.AddUserTimeTracking(userId, ProjectId, timeTracking, hours);
        NavigationManager.NavigateTo($"/dashboard_tracking_hours/{Day}/{Month}/{Year}");
    }
    public async Task SelectSon(int? projectId)
    {
        if (Level == 1)
        {
            var proId = projectId ?? default(int);
            var pro = await ProjectDataService.ReadProject(proId);
            NavigationManager.NavigateTo($"/addusertrackinghour/{Day}/{Month}/{Year}/{proId}/{NameProject1}/{pro.MyProjectName}/{2}/{0}", true);
        }
        else if (Level == 2)
        {
            var proId = projectId ?? default(int);
            var pro = await ProjectDataService.ReadProject(proId);
            NavigationManager.NavigateTo($"/addusertrackinghour/{Day}/{Month}/{Year}/{proId}/{NameProject1}/{NameProject2}/{pro.MyProjectName}/{3}/{0}", true);
        }
        else if (Level == 3)
        {
            var proId = projectId ?? default(int);
            var pro = await ProjectDataService.ReadProject(proId);
            NavigationManager.NavigateTo($"/addusertrackinghour/{Day}/{Month}/{Year}/{proId}/{NameProject1}/{NameProject2}/{NameProject3}/{pro.MyProjectName}/{4}/{0}", true);
        }
        else
        {
            var proId = projectId ?? default(int);
            var pro = await ProjectDataService.ReadProject(proId);
            NavigationManager.NavigateTo($"/addusertrackinghour/{Day}/{Month}/{Year}/{proId}/{pro.MyProjectName}/{1}/{0}", true);
        }

    }
    public async Task SelectProject(int? projectId)
    {

        if (Level == 1)
        {
            var proId = projectId ?? default(int);
            var pro = await ProjectDataService.ReadProject(proId);
            NavigationManager.NavigateTo($"/addusertrackinghour/{Day}/{Month}/{Year}/{proId}/{NameProject1}/{pro.MyProjectName}/{2}/{1}", true);
        }
        else if (Level == 2)
        {
            var proId = projectId ?? default(int);
            var pro = await ProjectDataService.ReadProject(proId);
            NavigationManager.NavigateTo($"/addusertrackinghour/{Day}/{Month}/{Year}/{proId}/{NameProject1}/{NameProject2}/{pro.MyProjectName}/{3}/{1}", true);
        }
        else if (Level == 3)
        {
            var proId = projectId ?? default(int);
            var pro = await ProjectDataService.ReadProject(proId);
            NavigationManager.NavigateTo($"/addusertrackinghour/{Day}/{Month}/{Year}/{proId}/{NameProject1}/{NameProject2}/{NameProject3}/{pro.MyProjectName}/{4}/{1}", true);
        }
        else
        {
            var proId = projectId ?? default(int);
            var pro = await ProjectDataService.ReadProject(proId);
            NavigationManager.NavigateTo($"/addusertrackinghour/{Day}/{Month}/{Year}/{proId}/{pro.MyProjectName}/{1}/{1}", true);
        }
    }
}
