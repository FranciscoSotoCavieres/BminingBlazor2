@page "/addusertrackinghour/{day:int}/{month:int}/{year:int}"
@using BminingBlazor.ViewModels.TrackingHours
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor
@inject IUserDataService UserDataService
@inject IProjectDataService ProjectDataService

<div class="row">
    <div class="col-md-12">
        <div>
            <fieldset class="scheduler-border">
                <legend class="scheduler-border">@Resource.LoadHours @ViewModel.MyTrackingHourDate.ToShortDateString()</legend>
                <EditForm Model="@ViewModel" OnValidSubmit="SubmitCallback">
                    <div class="form-group">
                        <label for="inputHours">@Resource.InvestedHours</label>
                        <input type="number" step="0.1" class="form-control" id="inputHours" placeholder="@Resource.InvestedHours">
                    </div>
                    <div class="form-group">
                        <label for="inputProject">@Resource.Project</label>
                        <select @bind="@ViewModel.MySelectedProjectId" class="form-control" id="inputProject">

                            @foreach (var projectDetailsViewModel in ViewModel?.OurAvailableProjects)
                            {
                                <option value="@projectDetailsViewModel.MyProjectId">
                                    @projectDetailsViewModel.MyProjectCode - @projectDetailsViewModel.MyProjectName
                                </option>
                            }
                        </select>
                    </div>
                    <button type="submit" class="btn btn-primary float-lg-right">@Resource.Load</button>
                </EditForm>
            </fieldset>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int Day { get; set; }
    [Parameter]
    public int Month { get; set; }
    [Parameter]
    public int Year { get; set; }

    public AddUserTimeTrackingViewModel ViewModel { get; set; }

  
    protected override async Task OnInitializedAsync()
    {
        var email = HttpContextAccessor.GetEmail();
        var userId = await UserDataService.GetUserId(email);
        ViewModel = new AddUserTimeTrackingViewModel(userId)
        {
            MyTrackingHourDate = new DateTime(Year, Month, Day),
        };
        
        var projects = await ProjectDataService.ReadProjectsByUser(userId);
        foreach (var viewProjectModel in projects)
        {
            var projectDetails = new ProjectDetailsViewModel
            {
                MyProjectName = viewProjectModel.Nombre_Proyecto,
                MyProjectCode = viewProjectModel.Cod_Proyecto,
                MyProjectId = viewProjectModel.Id_Proyecto,
                MyProjectManagerEmail = viewProjectModel.EmailProjectManager,
                MyProjectManagerId = 0,
                MyProjectManagerName = viewProjectModel.EmailProjectManager,
                MyProjectManagerSurname = viewProjectModel.EmailProjectManager,
            };
            ViewModel.OurAvailableProjects.Add(projectDetails);
        }
    }


    private void SubmitCallback()
    {
       
    }
}
