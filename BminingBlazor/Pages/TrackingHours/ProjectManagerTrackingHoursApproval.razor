@page "/projectmanagerdashboard"
@using BminingBlazor.ViewModels.TrackingHours
@using Microsoft.AspNetCore.Http

@inject IMatDialogService MatDialogService
@inject ITimeTrackingService TimeTrackingService
@inject IUserDataService UserDataService
@inject IHttpContextAccessor HttpContextAccessor

<div>
    @foreach (var projectManagerTrackingHoursProject in ViewModel.OurProjectManagerTrackingHoursProjects)
    {
        <h3>@projectManagerTrackingHoursProject.MyProjectName</h3>
        <hr>
        @foreach (var projectManagerTrackingHoursProjectMember in projectManagerTrackingHoursProject.OurProjectManagerTrackingHoursProjectMembers)
        {
            <div class="d-flex w-100">
                <div class="col">
                    @projectManagerTrackingHoursProjectMember.MyMemberName
                </div>
                <div class="col">
                    @projectManagerTrackingHoursProjectMember.MyHoursLoaded
                </div>
                <div class="col">
                    @projectManagerTrackingHoursProjectMember.DateOfHours.ToLongDateString()
                </div>
                <div class="col">
                    <button @onclick="()=> ApproveHours(projectManagerTrackingHoursProjectMember)">@Resource.Approve</button>
                    <button @onclick="()=> RejectHours(projectManagerTrackingHoursProjectMember)">@Resource.Reject</button>
                </div>
            </div>
        }
    }
</div>

@code {
    public ProjectManagerTrackingHoursApprovalViewModel ViewModel { get; set; }

    protected override void OnInitialized()
    {
        ViewModel = new ProjectManagerTrackingHoursApprovalViewModel();
        base.OnInitialized();

    }

    protected override async Task OnInitializedAsync()
    {
        var id = await UserDataService.GetUserId(HttpContextAccessor.GetEmail());
        ViewModel = await TimeTrackingService.GetPendingTimeTrackingHoursByProjectManager(id);
        await base.OnInitializedAsync();
    }

    private async Task ApproveHours(ProjectManagerTrackingHoursProjectMemberViewModel projectManagerTrackingHoursProjectMember)
    {
        await TimeTrackingService.ApproveUserTimeTracking(projectManagerTrackingHoursProjectMember.TimeTrackingHoursId);
    }

    private async Task RejectHours(ProjectManagerTrackingHoursProjectMemberViewModel projectManagerTrackingHoursProjectMember)
    {
        var reasons = await MatDialogService.PromptAsync(Resource.Reasons);
        await TimeTrackingService.RejectUserTimeTracking(projectManagerTrackingHoursProjectMember.TimeTrackingHoursId, reasons);
    }
}
