@page "/viewusers"
@using Models
@using BminingBlazor.Services
@using BminingBlazor.ViewModels.User

@inject IUserDataService UserDataService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IMatDialogService MatDialogService;


@attribute [Authorize(Roles = "AdminRRHH,Administracion")]
<h3>@Resource.Users</h3>
@if (users == null)
{
}
else
{
    <div class="table-responsive{-sm|-md|-lg|-xl}">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>@Resource.Email</th>
                    <th>@Resource.Names</th>
                    <th>@Resource.PaternalLastName</th>
                    <th>@Resource.MaternalLastName</th>
                    <th>@Resource.Rut</th>
                    <th>@Resource.Job</th>
                    <th>@Resource.Phone</th>
                    <th>@Resource.HomeAddress</th>
                    <th>@Resource.ContractType</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var p in users)
                {
                    <tr>
                        <td>@p.MyEmail</td>
                        <td>@p.MyName</td>
                        <td>@p.MyPaternalSurname</td>
                        <td>@p.MyMaternalSurname</td>
                        <td>@p.MyRut</td>
                        <td>@p.MyJob</td>
                        <td>@p.MyTelephone</td>
                        <td>@p.MyDirection</td>
                        <td>@p.MyContractType</td>
                        <MatButton @onclick=@(()=>EditCallback(p.MyId))>Editar</MatButton>
                        <MatButton @onclick=@(()=>Delete(p.MyId))>Eliminar</MatButton>
                    </tr>
                }
                <tr>
                    <MatButton type="button" class="btn btn-primary" @onclick="@NewUser">@Resource.AddUser</MatButton>
                </tr>
            </tbody>
        </table>
    </div>
}

@code {
    private List<UserViewModel> users;

    public void NewUser()
    {
        NavigationManager.NavigateTo("/CreateUser");
    }

    public async void Delete(int id)
    {
        var answer = await MatDialogService.AskAsync($"¿Seguro de borrar el proyecto {id}?", new List<string> { "Sí", "No" });
        if (answer == null || answer == "No")
            return;
        await UserDataService.DeleteUser(id);
        NavigationManager.NavigateTo("ViewUsers", true);

    }

    public void EditCallback(int id)
    {
        NavigationManager.NavigateTo($"EditUser/{id}");
    }

    protected override async Task OnInitializedAsync()
    {
        users = await UserDataService.ReadUsers();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }
}
